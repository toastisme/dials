variables:
  CACHE_VERSION: 20201102
  isPullRequest: $[startsWith(variables['Build.SourceBranch'], 'refs/pull/')]

stages:
- stage: prepare
  displayName: Check
  jobs:
  - job: setup
    displayName: static analysis
    pool:
      vmImage: ubuntu-20.04
    timeoutInMinutes: 10
    steps:
      - checkout: none

      # Use Python >=3.8 for syntax validation
      - task: UsePythonVersion@0
        displayName: Set up python
        inputs:
          versionSpec: 3.8

      # Run syntax validation on a shallow clone
      - bash: |
          set -eux
          mkdir repository
          cd repository
          echo Checking out $(Build.SourceBranch) from $(Build.Repository.Uri)
          git init
          git remote add origin $(Build.Repository.Uri)
          git fetch --depth 1 --no-recurse-submodules origin $(Build.SourceBranch)
          git checkout FETCH_HEAD
          python .azure-pipelines/syntax-validation.py
        displayName: Syntax validation

      - bash: |
          set -eux
          pip install flake8
          cd repository
          python .azure-pipelines/flake8-validation.py
        displayName: Flake8 validation

      # Set up constants for further build steps
      - bash: |
          echo "##vso[task.setvariable variable=CURRENT_WEEK;isOutput=true]$(date +W%W)"
          echo "##vso[task.setvariable variable=TODAY_ISO;isOutput=true]$(date +%Y%m%d)"
          echo
          echo "Checking for waiting newsfragments:"
          cd repository/newsfragments
          \ls -1 --color=never | grep -v "^\([0-9]\+\|README\)\." && {
          echo "##vso[task.setvariable variable=NEWSFRAGMENT_WAITING;isOutput=true]true"
          } || {
          echo "none found"
          echo "##vso[task.setvariable variable=NEWSFRAGMENT_WAITING;isOutput=true]false"
          }
        displayName: Set up build constants
        name: constants

- stage: build
  ${{ if not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')) }}:
    displayName: Build
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/pull/') }}:
    displayName: PR
  condition: and(eq(dependencies.prepare.outputs['setup.constants.NEWSFRAGMENT_WAITING'], 'false'),
                 succeeded())
  dependsOn:
  - prepare
  variables:
    CURRENT_WEEK: $[ stageDependencies.prepare.setup.outputs['constants.CURRENT_WEEK'] ]
    TODAY_ISO: $[ stageDependencies.prepare.setup.outputs['constants.TODAY_ISO'] ]

  jobs:
  - job: linux
    pool:
      vmImage: ubuntu-20.04
    strategy:
      matrix:
        python38:
          PYTHON_VERSION: 3.8
    timeoutInMinutes: 150
    steps:
    # Dependencies required for building gltbx
    - script: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-dev libglu1-mesa-dev
      displayName: Install dependencies

    - template: unix-build.yml
      parameters:
        conda_environment: .conda-envs/linux.txt

  - job: macos
    pool:
      vmImage: macOS-latest
    strategy:
      matrix:
        python38:
          PYTHON_VERSION: 3.8
    timeoutInMinutes: 150
    steps:
    - template: unix-build.yml
      parameters:
        conda_environment: .conda-envs/macos.txt

  - job: windows
    pool:
      vmImage: windows-latest
    strategy:
      matrix:
        python38:
          PYTHON_VERSION: 3.8
      # python39:
      #   PYTHON_VERSION: 3.9
    timeoutInMinutes: 150
    steps:
    - template: windows-build.yml
      parameters:
        conda_environment: .conda-envs/windows.txt

  - ${{ if startsWith(variables['Build.SourceBranch'], 'refs/pull/') }}:
    - job: pr
      displayName: ready to merge
      dependsOn:
      - linux
      - macos
      - windows
      condition: and(eq(variables.isPullRequest, true), succeeded())
      pool:
        vmImage: ubuntu-20.04
      steps:
      - checkout: none

    - job: xfel
      displayName: XFEL regression tests
      dependsOn:
      - linux
      - macos
      - windows
      condition: and(eq(variables.isPullRequest, true), succeededOrFailed())
      pool:
        vmImage: ubuntu-20.04
      steps:
      - checkout: none
      - task: DownloadPipelineArtifact@2
        inputs:
          allowFailedBuilds: true
          patterns: "*/xfel-regression.*"
          path: $(Pipeline.Workspace)/artifacts
        continueOnError: True
      - bash: |
          set -eu
          if [ ! -e artifacts ] || [ ! "$(\ls -A artifacts)" ]; then
            echo "##[error]XFEL regression tests did not run"
          else
            cd artifacts
            for D in *; do
              echo "##[group]${D}"
              cat "${D}/xfel-regression.txt"
              echo "##[endgroup]"
              cat "${D}/xfel-regression.output"
              echo
            done
          fi
        displayName: Report
        condition: always()
        workingDirectory: $(Pipeline.Workspace)/artifacts
